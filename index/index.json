{"interfaceLanguages":{"swift":[{"children":[{"title":"Making Queries","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/database\/init(filename:mode:)","title":"init(filename: String, mode: Database.OpenMode) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/database\/execute(_:)","title":"func execute(String) throws","type":"method"},{"path":"\/documentation\/rawdawg\/database\/prepare(_:)","title":"func prepare(BoundQuery) throws -> PreparedStatement","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/database\/openmode\/readonly","title":"case readOnly","type":"case"},{"path":"\/documentation\/rawdawg\/database\/openmode\/readwrite(create:)","title":"case readWrite(create: Bool)","type":"case"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/database\/openmode\/readwrite","title":"static var readWrite: Database.OpenMode","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/database\/openmode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/rawdawg\/database\/openmode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/database\/openmode","title":"Database.OpenMode","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/database\/assertisolated(_:file:line:)","title":"func assertIsolated(() -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/rawdawg\/database\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/rawdawg\/database\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(() -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/rawdawg\/database\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/database","title":"Database","type":"class"},{"children":[{"path":"\/documentation\/rawdawg\/preparedstatement\/run()","title":"func run() async throws -> InsertionStats","type":"method"},{"title":"Incrementally stepping through rows","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/preparedstatement\/step()-76bxz","title":"func step() async throws -> Row?","type":"method"},{"path":"\/documentation\/rawdawg\/preparedstatement\/step()-92san","title":"func step<Column1, Column2, each Column>() async throws -> (Column1, Column2, repeat each Column)?","type":"method"},{"path":"\/documentation\/rawdawg\/preparedstatement\/step()-3wy2j","title":"func step<T>() async throws -> T?","type":"method"},{"title":"Fetching all rows","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/preparedstatement\/fetchall()-7rh3m","title":"func fetchAll() async throws -> [Row]","type":"method"},{"path":"\/documentation\/rawdawg\/preparedstatement\/fetchall()-6jov4","title":"func fetchAll<Column1, Column2, each Column>() async throws -> [(Column1, Column2, repeat each Column)]","type":"method"},{"path":"\/documentation\/rawdawg\/preparedstatement\/fetchall()-3h0eg","title":"func fetchAll<T>() async throws -> [T]","type":"method"},{"title":"Fetching a single row","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/preparedstatement\/fetchone()-o1ui","title":"func fetchOne() async throws -> Row","type":"method"},{"path":"\/documentation\/rawdawg\/preparedstatement\/fetchone()-8yva9","title":"func fetchOne<Column1, each Column>() async throws -> (Column1, repeat each Column)","type":"method"},{"path":"\/documentation\/rawdawg\/preparedstatement\/fetchone()-4grfr","title":"func fetchOne<T>() async throws -> T","type":"method"},{"title":"Fetching an optional row","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/preparedstatement\/fetchoptional()-30gfy","title":"func fetchOptional() async throws -> Row?","type":"method"},{"path":"\/documentation\/rawdawg\/preparedstatement\/fetchoptional()-92nz3","title":"func fetchOptional<Column1, Column2, each Column>() async throws -> (Column1, Column2, repeat each Column)?","type":"method"},{"path":"\/documentation\/rawdawg\/preparedstatement\/fetchoptional()-1sp53","title":"func fetchOptional<T>() async throws -> T?","type":"method"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/preparedstatement\/finalize()","title":"func finalize() async throws","type":"method"}],"path":"\/documentation\/rawdawg\/preparedstatement","title":"PreparedStatement","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/boundquery\/stringinterpolation\/init(literalcapacity:interpolationcount:)","title":"init(literalCapacity: Int, interpolationCount: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/boundquery\/stringinterpolation\/appendinterpolation(_:)","title":"func appendInterpolation<T>(T)","type":"method"},{"path":"\/documentation\/rawdawg\/boundquery\/stringinterpolation\/appendinterpolation(fragment:)","title":"func appendInterpolation(fragment: BoundQuery?)","type":"method"},{"path":"\/documentation\/rawdawg\/boundquery\/stringinterpolation\/appendinterpolation(raw:)","title":"func appendInterpolation(raw: String)","type":"method"},{"path":"\/documentation\/rawdawg\/boundquery\/stringinterpolation\/appendliteral(_:)","title":"func appendLiteral(StaticString)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/boundquery\/stringinterpolation\/stringliteraltype","title":"BoundQuery.StringInterpolation.StringLiteralType","type":"typealias"}],"path":"\/documentation\/rawdawg\/boundquery\/stringinterpolation","title":"BoundQuery.StringInterpolation","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/boundquery\/init(stringinterpolation:)","title":"init(stringInterpolation: BoundQuery.StringInterpolation)","type":"init"},{"path":"\/documentation\/rawdawg\/boundquery\/init(stringliteral:)","title":"init(stringLiteral: BoundQuery.StringLiteralType)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/boundquery\/stringliteraltype","title":"BoundQuery.StringLiteralType","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/boundquery\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/rawdawg\/boundquery\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/boundquery\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/rawdawg\/boundquery\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/boundquery","title":"BoundQuery","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqlprimitiveencodable\/encode()","title":"func encode() -> SQLiteValue","type":"method"}],"path":"\/documentation\/rawdawg\/sqlprimitiveencodable","title":"SQLPrimitiveEncodable","type":"protocol"},{"title":"Decoding Values","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqlitevalue\/blob(_:)","title":"case blob(SQLiteBlob)","type":"case"},{"path":"\/documentation\/rawdawg\/sqlitevalue\/float(_:)","title":"case float(Float64)","type":"case"},{"path":"\/documentation\/rawdawg\/sqlitevalue\/integer(_:)","title":"case integer(Int64)","type":"case"},{"path":"\/documentation\/rawdawg\/sqlitevalue\/null","title":"case null","type":"case"},{"path":"\/documentation\/rawdawg\/sqlitevalue\/text(_:)","title":"case text(String)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqlitevalue\/init(fromsql:)","title":"init?(fromSQL: SQLiteValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqlitevalue\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqlitevalue\/encode()","title":"func encode() -> SQLiteValue","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqlitevalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/rawdawg\/sqlitevalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/sqlitevalue","title":"SQLiteValue","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqlnull\/init()","title":"init()","type":"init"},{"path":"\/documentation\/rawdawg\/sqlnull\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/rawdawg\/sqlnull\/init(fromsql:)","title":"init?(fromSQL: SQLiteValue)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqlnull\/encode()","title":"func encode() -> SQLiteValue","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqlnull\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/rawdawg\/sqlnull\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/sqlnull","title":"SQLNull","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqliteblob\/empty","title":"case empty","type":"case"},{"path":"\/documentation\/rawdawg\/sqliteblob\/loaded(_:)","title":"case loaded(Data)","type":"case"},{"path":"\/documentation\/rawdawg\/sqliteblob\/stream(_:)","title":"case stream(Never)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqliteblob\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/rawdawg\/sqliteblob\/init(fromsql:)","title":"init?(fromSQL: SQLiteValue)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqliteblob\/encode()","title":"func encode() -> SQLiteValue","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqliteblob\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/rawdawg\/sqliteblob\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/sqliteblob","title":"SQLiteBlob","type":"enum"},{"children":[{"title":"Decode into Swift value","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/decode()-5gu78","title":"func decode<each Column>() throws -> (repeat each Column)","type":"method"},{"path":"\/documentation\/rawdawg\/row\/decode()-73lf8","title":"func decode<T>() throws -> T","type":"method"},{"title":"Get value given the column name","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/subscript(_:)-8ic3s","title":"subscript(String) -> SQLiteValue?","type":"subscript"},{"path":"\/documentation\/rawdawg\/row\/decode(valueat:)-8i6gt","title":"func decode<Column>(valueAt: String) throws -> Column","type":"method"},{"path":"\/documentation\/rawdawg\/row\/decode(valueat:as:)-5zo4x","title":"func decode<Column>(valueAt: String, as: Column.Type) throws -> Column","type":"method"},{"title":"Get value at index","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/subscript(valueat:)","title":"subscript(valueAt _: Int) -> SQLiteValue","type":"subscript"},{"path":"\/documentation\/rawdawg\/row\/decode(valueat:)-797yx","title":"func decode<Column>(valueAt: Int) throws -> Column","type":"method"},{"path":"\/documentation\/rawdawg\/row\/decode(valueat:as:)-5maig","title":"func decode<Column>(valueAt: Int, as: Column.Type) throws -> Column","type":"method"},{"title":"Key-value pairs","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/subscript(_:)-maj6","title":"subscript(Int) -> (columnName: String, value: SQLiteValue)","type":"subscript"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/iterator\/next()","title":"func next() -> Row.Iterator.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/iterator\/element","title":"Row.Iterator.Element","type":"typealias"}],"path":"\/documentation\/rawdawg\/row\/iterator","title":"Row.Iterator","type":"struct"},{"path":"\/documentation\/rawdawg\/row\/makeiterator()","title":"func makeIterator() -> Row.Iterator","type":"method"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/rawdawg\/row\/startindex","title":"var startIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/element","title":"Row.Element","type":"typealias"},{"path":"\/documentation\/rawdawg\/row\/index","title":"Row.Index","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/rawdawg\/row\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/rawdawg\/row\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/rawdawg\/row\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/rawdawg\/row\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/startofsuffix(while:)","title":"func startOfSuffix(while: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/rawdawg\/row\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/rawdawg\/row\/suffix(while:)","title":"func suffix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/rawdawg\/row\/trimming(while:)","title":"func trimming(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/rawdawg\/row\/trimmingsuffix(while:)","title":"func trimmingSuffix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"}],"path":"\/documentation\/rawdawg\/row\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/rawdawg\/row\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/rawdawg\/row\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/rawdawg\/row\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/adjacentpairs()","title":"func adjacentPairs() -> AdjacentPairsCollection<Self>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/chunked(by:)","title":"func chunked(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/chunked(on:)","title":"func chunked<Subject>(on: (Self.Element) throws -> Subject) rethrows -> [(Subject, Self.SubSequence)]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/chunks(ofcount:)","title":"func chunks(ofCount: Int) -> ChunksOfCountCollection<Self>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/combinations(ofcount:)","title":"func combinations(ofCount: Int) -> CombinationsSequence<Self>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/compacted()-62pe7","title":"func compacted<Unwrapped>() -> CompactedCollection<Self, Unwrapped>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/cycled()","title":"func cycled() -> CycledSequence<Self>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/cycled(times:)","title":"func cycled(times: Int) -> CycledTimesCollection<Self>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/rawdawg\/row\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/rawdawg\/row\/endofprefix(while:)","title":"func endOfPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/rawdawg\/row\/evenlychunked(in:)","title":"func evenlyChunked(in: Int) -> EvenlyChunkedCollection<Self>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/rawdawg\/row\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/rawdawg\/row\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/rawdawg\/row\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/rawdawg\/row\/indexed()","title":"func indexed() -> IndexedCollection<Self>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/map(_:)-6re46","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/max(count:sortedby:)","title":"func max(count: Int, sortedBy: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/min(count:sortedby:)","title":"func min(count: Int, sortedBy: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/partitioned(by:)","title":"func partitioned(by: (Self.Element) throws -> Bool) rethrows -> (falseElements: [Self.Element], trueElements: [Self.Element])","type":"method"},{"path":"\/documentation\/rawdawg\/row\/partitioningindex(where:)","title":"func partitioningIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/rawdawg\/row\/permutations(ofcount:)","title":"func permutations(ofCount: Int?) -> PermutationsSequence<Self>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/rawdawg\/row\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/rawdawg\/row\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/rawdawg\/row\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/rawdawg\/row\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/rawdawg\/row\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/rawdawg\/row\/randomsample(count:)","title":"func randomSample(count: Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/randomsample(count:using:)-8kuzt","title":"func randomSample<G>(count: Int, using: inout G) -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/randomstablesample(count:)","title":"func randomStableSample(count: Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/randomstablesample(count:using:)","title":"func randomStableSample<G>(count: Int, using: inout G) -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/striding(by:)","title":"func striding(by: Int) -> StridingCollection<Self>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/rawdawg\/row\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/rawdawg\/row\/windows(ofcount:)","title":"func windows(ofCount: Int) -> WindowsOfCountCollection<Self>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/subscript(_:)-1cr32","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/rawdawg\/row\/subscript(_:)-433yo","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/rawdawg\/row\/subscript(_:)-5dyqi","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/rawdawg\/row\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/rawdawg\/row\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/rawdawg\/row\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/rawdawg\/row\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/row\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/rawdawg\/row\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/compacted()-6j80c","title":"func compacted<Unwrapped>() -> CompactedSequence<Self, Unwrapped>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/rawdawg\/row\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/rawdawg\/row\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/rawdawg\/row\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/filter(_:)-251lm","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/filter(_:)-4kh02","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/rawdawg\/row\/firstnonnil(_:)","title":"func firstNonNil<Result>((Self.Element) throws -> Result?) rethrows -> Result?","type":"method"},{"path":"\/documentation\/rawdawg\/row\/flatmap(_:)-8ghmb","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/flatmap(_:)-dp3n","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/rawdawg\/row\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/rawdawg\/row\/grouped(by:)","title":"func grouped<GroupKey>(by: (Self.Element) throws -> GroupKey) rethrows -> [GroupKey : [Self.Element]]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> InterspersedSequence<Self>","type":"method"},{"path":"\/documentation\/rawdawg\/row\/keyed(by:)","title":"func keyed<Key>(by: (Self.Element) throws -> Key) rethrows -> [Key : Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/keyed(by:resolvingconflictswith:)","title":"func keyed<Key>(by: (Self.Element) throws -> Key, resolvingConflictsWith: (Key, Self.Element, Self.Element) throws -> Self.Element) rethrows -> [Key : Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/rawdawg\/row\/map(_:)-7exxa","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/rawdawg\/row\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/rawdawg\/row\/minandmax(by:)","title":"func minAndMax(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> (min: Self.Element, max: Self.Element)?","type":"method"},{"path":"\/documentation\/rawdawg\/row\/randomsample(count:using:)-1h0mn","title":"func randomSample<G>(count: Int, using: inout G) -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/rawdawg\/row\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/rawdawg\/row\/reductions(_:)","title":"func reductions((Self.Element, Self.Element) throws -> Self.Element) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/reductions(_:_:)","title":"func reductions<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> [Result]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/reductions(into:_:)","title":"func reductions<Result>(into: Result, (inout Result, Self.Element) throws -> Void) rethrows -> [Result]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/scan(_:)","title":"func scan((Self.Element, Self.Element) throws -> Self.Element) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/scan(_:_:)","title":"func scan<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> [Result]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/scan(into:_:)","title":"func scan<Result>(into: Result, (inout Result, Self.Element) throws -> Void) rethrows -> [Result]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/sorted(using:)-7e7p9","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/sorted(using:)-m1cu","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/rawdawg\/row\/uniqued(on:)","title":"func uniqued<Subject>(on: (Self.Element) throws -> Subject) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/rawdawg\/row\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/rawdawg\/row\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/row","title":"Row","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqlprimitivedecodable\/init(fromsql:)","title":"init?(fromSQL: SQLiteValue)","type":"init"}],"path":"\/documentation\/rawdawg\/sqlprimitivedecodable","title":"SQLPrimitiveDecodable","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/insertionstats\/lastinsertedrowid","title":"var lastInsertedRowid: sqlite3_int64","type":"property"},{"path":"\/documentation\/rawdawg\/insertionstats\/rowsaffected","title":"var rowsAffected: sqlite3_int64","type":"property"},{"path":"\/documentation\/rawdawg\/insertionstats\/totalrowsaffected","title":"var totalRowsAffected: sqlite3_int64","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/insertionstats\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/rawdawg\/insertionstats\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/insertionstats","title":"InsertionStats","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"SQLite3 errors","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqliteerror\/unknown(code:message:)","title":"case unknown(code: Int32, message: String)","type":"case"},{"path":"\/documentation\/rawdawg\/sqliteerror\/opendatabase(code:message:filename:mode:)","title":"case openDatabase(code: Int32, message: String, filename: String, mode: Database.OpenMode)","type":"case"},{"path":"\/documentation\/rawdawg\/sqliteerror\/preparestatement(code:message:query:)","title":"case prepareStatement(code: Int32, message: String, query: BoundQuery)","type":"case"},{"path":"\/documentation\/rawdawg\/sqliteerror\/sqliteerrorcode","title":"var sqliteErrorCode: Int32?","type":"property"},{"path":"\/documentation\/rawdawg\/sqliteerror\/sqlitemessage","title":"var sqliteMessage: String?","type":"property"},{"path":"\/documentation\/rawdawg\/sqliteerror\/code","title":"var code: Int32","type":"property"},{"path":"\/documentation\/rawdawg\/sqliteerror\/message","title":"var message: String","type":"property"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqliteerror\/bindingmissmatch(query:expected:got:)","title":"case bindingMissmatch(query: BoundQuery, expected: Int32, got: Int)","type":"case"},{"path":"\/documentation\/rawdawg\/sqliteerror\/columncountmissmatch(expected:got:)","title":"case columnCountMissmatch(expected: Int, got: Int)","type":"case"},{"path":"\/documentation\/rawdawg\/sqliteerror\/emptyquery(query:)","title":"case emptyQuery(query: BoundQuery)","type":"case"},{"path":"\/documentation\/rawdawg\/sqliteerror\/norowsfetched","title":"case noRowsFetched","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqliteerror\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/sqliteerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/rawdawg\/sqliteerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/sqliteerror","title":"SQLiteError","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/foundation\/date\/init(fromsql:)","title":"init?(fromSQL: SQLiteValue)","type":"init"}],"path":"\/documentation\/rawdawg\/foundation\/date\/sqlprimitivedecodable-implementations","title":"SQLPrimitiveDecodable Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/foundation\/date","title":"Date","type":"extension"}],"path":"\/documentation\/rawdawg\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/swift\/fixedwidthinteger\/init(fromsql:)-3kvyk","title":"init?(fromSQL: SQLiteValue)","type":"init"},{"path":"\/documentation\/rawdawg\/swift\/fixedwidthinteger\/init(fromsql:)-8jzj5","title":"init?(fromSQL: SQLiteValue)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/swift\/fixedwidthinteger\/encode()","title":"func encode() -> SQLiteValue","type":"method"}],"path":"\/documentation\/rawdawg\/swift\/fixedwidthinteger","title":"FixedWidthInteger","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/swift\/bool\/init(fromsql:)","title":"init?(fromSQL: SQLiteValue)","type":"init"}],"path":"\/documentation\/rawdawg\/swift\/bool\/sqlprimitivedecodable-implementations","title":"SQLPrimitiveDecodable Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/swift\/bool","title":"Bool","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/swift\/double\/init(fromsql:)","title":"init?(fromSQL: SQLiteValue)","type":"init"}],"path":"\/documentation\/rawdawg\/swift\/double\/sqlprimitivedecodable-implementations","title":"SQLPrimitiveDecodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/swift\/double\/encode()","title":"func encode() -> SQLiteValue","type":"method"}],"path":"\/documentation\/rawdawg\/swift\/double\/sqlprimitiveencodable-implementations","title":"SQLPrimitiveEncodable Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/swift\/double","title":"Double","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/swift\/float\/init(fromsql:)","title":"init?(fromSQL: SQLiteValue)","type":"init"}],"path":"\/documentation\/rawdawg\/swift\/float\/sqlprimitivedecodable-implementations","title":"SQLPrimitiveDecodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/swift\/float\/encode()","title":"func encode() -> SQLiteValue","type":"method"}],"path":"\/documentation\/rawdawg\/swift\/float\/sqlprimitiveencodable-implementations","title":"SQLPrimitiveEncodable Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/swift\/float","title":"Float","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/swift\/float16\/encode()","title":"func encode() -> SQLiteValue","type":"method"}],"path":"\/documentation\/rawdawg\/swift\/float16\/sqlprimitiveencodable-implementations","title":"SQLPrimitiveEncodable Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/swift\/float16","title":"Float16","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/swift\/string\/init(fromsql:)","title":"init?(fromSQL: SQLiteValue)","type":"init"}],"path":"\/documentation\/rawdawg\/swift\/string\/sqlprimitivedecodable-implementations","title":"SQLPrimitiveDecodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/swift\/string\/encode()","title":"func encode() -> SQLiteValue","type":"method"}],"path":"\/documentation\/rawdawg\/swift\/string\/sqlprimitiveencodable-implementations","title":"SQLPrimitiveEncodable Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/swift\/string","title":"String","type":"extension"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/swift\/optional\/init(fromsql:)","title":"init?(fromSQL: SQLiteValue)","type":"init"}],"path":"\/documentation\/rawdawg\/swift\/optional\/sqlprimitivedecodable-implementations","title":"SQLPrimitiveDecodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rawdawg\/swift\/optional\/encode()","title":"func encode() -> SQLiteValue","type":"method"}],"path":"\/documentation\/rawdawg\/swift\/optional\/sqlprimitiveencodable-implementations","title":"SQLPrimitiveEncodable Implementations","type":"symbol"}],"path":"\/documentation\/rawdawg\/swift\/optional","title":"Optional","type":"extension"}],"path":"\/documentation\/rawdawg\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/rawdawg","title":"RawDawg","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}