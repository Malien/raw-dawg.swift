{"seeAlsoSections":[{"title":"Fetching an optional row","generated":true,"identifiers":["doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchOptional()-30gfy","doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchOptional()-92nz3"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchOptional()-1sp53"},"abstract":[{"type":"text","text":"Return the first row decoded using a "},{"type":"codeVoice","code":"Decodable"},{"text":" protocol or ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if the statement yields 0 rows","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"consuming"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"fetchOptional","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">() ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"? ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"}]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This is a wrapper on top of the "},{"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchOptional()-30gfy","type":"reference","isActive":true},{"type":"text","text":" method, that decodes the row into a single "},{"type":"codeVoice","code":"Decodable"},{"text":" type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Three handled cases are:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A single column is expected, and the type is "},{"type":"reference","isActive":true,"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/SQLPrimitiveDecodable"},{"type":"text","text":", it will be decoded as such."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A single column is expected, and the type uses "},{"code":"Decoder\/singleValueContainer","type":"codeVoice"},{"type":"text","text":" to decode itself."}]}]},{"content":[{"inlineContent":[{"text":"Multiple columns are expected, and the type uses ","type":"text"},{"type":"codeVoice","code":"Decoder\/container(keyedBy:)"},{"type":"text","text":" to decode itself."},{"text":" ","type":"text"},{"text":"Any other case (aka. ","type":"text"},{"type":"codeVoice","code":"Decoder\/unkeyedContainer"},{"type":"text","text":" and "},{"code":"Decoder\/singleValueContainer","type":"codeVoice"},{"type":"text","text":" on multiple columns)"},{"text":" ","type":"text"},{"type":"text","text":"is not supported and will throw a runtime error."},{"type":"text","text":" "},{"type":"text","text":"If you donâ€™t want to create a "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" struct just to have a type-safe decodes of row values, there is "},{"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchOptional()-92nz3","overridingTitleInlineContent":[{"text":"an overload","type":"text"},{"type":"text","text":" "},{"text":"that is just right","type":"text"}],"isActive":true,"overridingTitle":"an overload that is just right","type":"reference"},{"text":" for those ad-hoc style of queries","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"This action will consume and finalize the statement, yielding any errors that rise from doing so back to the caller"}],"type":"paragraph"}]}],"metadata":{"externalID":"s:7RawDawg17PreparedStatementV13fetchOptionalxSgyYaKSeRzlF","title":"fetchOptional()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"fetchOptional"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">() "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"role":"symbol","roleHeading":"Instance Method","symbolKind":"method","modules":[{"name":"RawDawg"}]},"hierarchy":{"paths":[["doc:\/\/RawDawg\/documentation\/RawDawg","doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement"]]},"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/rawdawg\/preparedstatement\/fetchoptional()-1sp53"]}],"references":{"doc://RawDawg/documentation/RawDawg/PreparedStatement/fetchOptional()-92nz3":{"type":"topic","abstract":[{"type":"text","text":"Return the frist row decoded as a tuple of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/SQLPrimitiveDecodable"},{"type":"text","text":" values, or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the statement yields 0 rows"}],"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchOptional()-92nz3","title":"fetchOptional()","url":"\/documentation\/rawdawg\/preparedstatement\/fetchoptional()-92nz3","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"fetchOptional"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Column1"},{"text":", ","kind":"text"},{"text":"Column2","kind":"genericParameter"},{"kind":"text","text":", each "},{"kind":"genericParameter","text":"Column"},{"kind":"text","text":">() "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> ("},{"text":"Column1","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Column2","kind":"typeIdentifier"},{"kind":"text","text":", repeat each "},{"text":"Column","kind":"typeIdentifier"},{"kind":"text","text":")?"}],"role":"symbol","kind":"symbol"},"doc://RawDawg/documentation/RawDawg/Row":{"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/Row","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Decoded, owned row, with column values"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Row"}],"title":"Row","url":"\/documentation\/rawdawg\/row","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Row"}]},"doc://RawDawg/documentation/RawDawg/PreparedStatement/fetchOptional()-30gfy":{"url":"\/documentation\/rawdawg\/preparedstatement\/fetchoptional()-30gfy","role":"symbol","type":"topic","title":"fetchOptional()","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchOptional()-30gfy","abstract":[{"text":"Return the first ","type":"text"},{"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/Row","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if the statement yields 0 rows","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"fetchOptional","kind":"identifier"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:7RawDawg3RowV","text":"Row","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"kind":"symbol"},"doc://RawDawg/documentation/RawDawg/SQLPrimitiveDecodable":{"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/SQLPrimitiveDecodable","kind":"symbol","type":"topic","abstract":[{"text":"A way of decoding dynamic ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/SQLiteValue"},{"text":" into more specific type.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLPrimitiveDecodable"}],"title":"SQLPrimitiveDecodable","url":"\/documentation\/rawdawg\/sqlprimitivedecodable","role":"symbol","navigatorTitle":[{"text":"SQLPrimitiveDecodable","kind":"identifier"}]},"doc://RawDawg/documentation/RawDawg":{"kind":"symbol","abstract":[{"text":"Yet another SQLite3 Swift driver","type":"text"}],"type":"topic","title":"RawDawg","role":"collection","url":"\/documentation\/rawdawg","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg"},"doc://RawDawg/documentation/RawDawg/PreparedStatement/fetchOptional()-1sp53":{"role":"symbol","title":"fetchOptional()","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"fetchOptional","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">() "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"url":"\/documentation\/rawdawg\/preparedstatement\/fetchoptional()-1sp53","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchOptional()-1sp53","abstract":[{"text":"Return the first row decoded using a ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" protocol or ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the statement yields 0 rows"}],"kind":"symbol"},"doc://RawDawg/documentation/RawDawg/Database/prepare(_:)":{"kind":"symbol","abstract":[{"type":"text","text":"Prepares a SQL query for execution."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"prepare"},{"text":"(","kind":"text"},{"text":"BoundQuery","preciseIdentifier":"s:7RawDawg10BoundQueryV","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"PreparedStatement","preciseIdentifier":"s:7RawDawg17PreparedStatementV","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/rawdawg\/database\/prepare(_:)","title":"prepare(_:)","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/Database\/prepare(_:)"},"doc://RawDawg/documentation/RawDawg/PreparedStatement":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PreparedStatement","kind":"identifier"}],"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement","type":"topic","url":"\/documentation\/rawdawg\/preparedstatement","abstract":[{"type":"text","text":"Prepared statement returned from the "},{"type":"reference","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/Database\/prepare(_:)","isActive":true},{"text":" function.","type":"text"}],"title":"PreparedStatement","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PreparedStatement"}],"kind":"symbol"},"doc://RawDawg/documentation/RawDawg/SQLiteValue":{"title":"SQLiteValue","kind":"symbol","abstract":[{"text":"Owned SQLite value of all possible storage types","type":"text"}],"url":"\/documentation\/rawdawg\/sqlitevalue","role":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"SQLiteValue","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SQLiteValue"}],"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/SQLiteValue"}}}