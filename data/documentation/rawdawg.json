{"identifier":{"url":"doc:\/\/RawDawg\/documentation\/RawDawg","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"symbolKind":"module","role":"collection","externalID":"RawDawg","title":"RawDawg","roleHeading":"Framework","modules":[{"name":"RawDawg"}]},"abstract":[{"type":"text","text":"Yet another SQLite3 Swift driver"}],"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Making Queries","identifiers":["doc:\/\/RawDawg\/documentation\/RawDawg\/Database","doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement","doc:\/\/RawDawg\/documentation\/RawDawg\/BoundQuery","doc:\/\/RawDawg\/documentation\/RawDawg\/SQLPrimitiveEncodable"]},{"title":"Decoding Values","identifiers":["doc:\/\/RawDawg\/documentation\/RawDawg\/SQLiteValue","doc:\/\/RawDawg\/documentation\/RawDawg\/SQLNull","doc:\/\/RawDawg\/documentation\/RawDawg\/SQLiteBlob","doc:\/\/RawDawg\/documentation\/RawDawg\/Row","doc:\/\/RawDawg\/documentation\/RawDawg\/SQLPrimitiveDecodable"]},{"title":"Structures","identifiers":["doc:\/\/RawDawg\/documentation\/RawDawg\/InsertionStats"]},{"title":"Enumerations","identifiers":["doc:\/\/RawDawg\/documentation\/RawDawg\/SQLiteError"]},{"title":"Extended Modules","identifiers":["doc:\/\/RawDawg\/documentation\/RawDawg\/Foundation","doc:\/\/RawDawg\/documentation\/RawDawg\/Swift"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/rawdawg"]}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"raw dawg dat squeel"}]},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Cause there’s nothing wrong with writing raw SQL!"}],"type":"paragraph"},{"code":["let db = try Database(filename: \"mydb.sqlite\")","try await db.execute(\"\"\"","  create table users (id integer primary key autoincrement, name text not null, age integer);","  insert into users (name, age) values ('Alice', 24), ('Bob', null);","  \"\"\")","","struct User: Codable {","  var id: Int","  var name: String","  var age: Int?","}","","let username = \"Alice\"","let alice: User = try await db.prepare(\"select id, name, age from users where name = \\(username)\").fetchOne()","","let adults: [User] = try await db.prepare(\"select * from users where age is not null and age > 18\").fetchAll()"],"type":"codeListing","syntax":"swift"},{"text":"Checklist:","level":3,"type":"heading","anchor":"Checklist"},{"level":4,"text":"✅ As close to raw SQL as possible.","anchor":"✅-As-close-to-raw-SQL-as-possible","type":"heading"},{"inlineContent":[{"type":"text","text":"Without building leaky ORM abstractions on top of relational model. Plain and simple. No need to learn an additional query mechanism."}],"type":"paragraph"},{"syntax":"swift","code":["db.prepare(\"\"\"","  select","    products.id as product_id,","    products.name as product_name,","    sum(receipt_items.amount * products.price) as total_price","  from receipt_items","  join products","    on receipt_items.product_id = products.id","  having receipt_items.is_promotional = 0","  group by (products.id, products.name)","  where receipt_items.receipt_id = \\(id)","  \"\"\")","  .fetchAll()"],"type":"codeListing"},{"level":4,"anchor":"✅-Convenient-swift-API-on-top-of-sqlite3","type":"heading","text":"✅ Convenient swift API on top of sqlite3"},{"type":"paragraph","inlineContent":[{"type":"text","text":"sqlite3 C’s API is quite nice… when it comes to C APIs."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift users deserve better! Using all of the modern Swift tooling to build a delightful experience"}]},{"type":"heading","level":4,"anchor":"✅-Codable-support-for-easy-and-convenient-row-unmarshaling","text":"✅ Codable support for easy and convenient row unmarshaling."},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the built-in familiar way to deserialize values from sqlite into structs. Couldn’t be easier."}]},{"type":"codeListing","code":["struct Post: Codable {","  var title: String","  var contents: String","  var createdAtEpoch: Int","  var starred: Bool","  var cover: String?","  var category: Category","","  enum CodingKeys: String, CodingKey {","    case title, contents, createdAtEpoch = \"created_at\", starred, cover","  }","","  enum Category: String, Codable {","    case lifestyle, health, cooking, sqlite","  }","}","","let posts: [Post] = try await db.prepare(\"\"\"","    select title, contents, created_at, 0 as starred, cover, category","    from posts","    \"\"\").fetchAll()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This also means you get "},{"code":"RawRepresentable","type":"codeVoice"},{"type":"text","text":" enum serialization for free. Bot "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" and "},{"code":"String","type":"codeVoice"},{"text":" ones.","type":"text"}]},{"text":"✅ Quick and easy tuple deserialization","level":4,"type":"heading","anchor":"✅-Quick-and-easy-tuple-deserialization"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Want to quickly extract a couple of values from the database in ad-hoc manner? No worries, there is no longer a need to create a struct just to hold the type-safe result of a query"}]},{"code":["let userCount: Int = db.prepare(\"select count(*) from users\").fetchOne()","","let (id, createdAt): (Int, Date) = db.prepare(\"\"\"","    insert into users (fist_name, last_name)","    values ('John', 'Appleseed')","    returning id, created_at","    \"\"\").fetchOne()","","let username: (String, String)? = db.prepare(","    \"select first_name, last_name from users where id = \\(userID)\"",").fetchOptional()","","let produceSoldToday: [(Int, String, Int)] = db.prepare(\"\"\"","    select products.id, products.name, sum(sales.amount * sales.price)","    from sales","    join products on sales.product_id = products.id","    group by products.id, products.name","    having sales.created_at > datetime('now', 'start of day')","    \"\"\").fetchAll()"],"syntax":"swift","type":"codeListing"},{"type":"heading","anchor":"✅-No-SQL-injections","text":"✅ No SQL injections.","level":4},{"inlineContent":[{"type":"codeVoice","code":"\"where name = \\(username)\""},{"type":"text","text":" is built on top of Swift’s "},{"type":"codeVoice","code":"ExpressibleByStringInterpolation"},{"text":" and safely escapes (binds) arguments instead of interpolating a string.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["func getUser(byID id: Int) async throws -> User? {","  try await db.prepare(\"select * from users where id = \\(id)\").fetchOptional()","}","","func createUser(withName name: String) async throws -> User {","  try await db.prepare(\"insert into users (name) values (\\(name)) returning *\").fetchOne()","}","","try await createUser(withName: \"mark'); drop table users;\") \/\/ Phew 😮‍💨. Nothing to worry about"],"syntax":"swift"},{"type":"heading","level":4,"text":"✅ Database is an actor.","anchor":"✅-Database-is-an-actor"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SQLite access is single threaded anyway. Actors provide convenient data access serialization with familiar async-await syntax."}]},{"text":"✅ Convenient APIs for whatever life throws your way","level":4,"anchor":"✅-Convenient-APIs-for-whatever-life-throws-your-way","type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"“Always-at-least-one” fetching via "},{"type":"reference","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchOne()-4grfr","isActive":true}],"type":"paragraph"}],"checked":true},{"checked":true,"content":[{"type":"paragraph","inlineContent":[{"text":"Optionalities built-in via ","type":"text"},{"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchOptional()-1sp53","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Fetch everything via "},{"type":"reference","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchAll()-3h0eg","isActive":true}]}],"checked":true},{"content":[{"type":"paragraph","inlineContent":[{"text":"Incremental fetching via ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/step()-3wy2j"}]}],"checked":true}]},{"level":4,"text":"✅ Dynamic safe query building","type":"heading","anchor":"✅-Dynamic-safe-query-building"},{"code":["func findProducts(filter: ProducFilter) async throws -> [Product] {","  try await db.prepare(\"select * from products \\(fragment: filter.whereClause)\").fetchAll()","}","","enum ProductFilter {","  case withPrice(below: Int)","  case withPrice(above: Int)","  case all","","  var whereClause: BoundQuery {","    switch self {","    case .withPrice(below: let threshold): \"where price < \\(threshold)\"","    case .withPrice(above: let threshold): \"where price > \\(threshold)\"","    case .all: \"\"","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"I might want to remove the ","type":"text"},{"code":"fragment:","type":"codeVoice"},{"text":" label going forwards 🤔","type":"text"}]}]},{"type":"heading","level":4,"anchor":"✅-Dynamic-unsafe-query-building-🚧","text":"✅ Dynamic unsafe query building 🚧"},{"syntax":"swift","type":"codeListing","code":["try await db.prepare(\"select * from \\(raw: sqlInjectionGalore)\")"]},{"type":"heading","text":"✅ Deterministic resource management","anchor":"✅-Deterministic-resource-management","level":4},{"type":"paragraph","inlineContent":[{"code":"struct PreparedStatement: ~Copyable","type":"codeVoice"},{"text":". This means there is no way to misuse statement with something like","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var statement = try await db.prepare(\"select 1\")","let row = try await statement.step()","try await statement.finalize()","let nextRow = try await statement.step() \/\/ Nope!"]}]}],"sections":[],"kind":"symbol","references":{"doc://RawDawg/documentation/RawDawg/InsertionStats":{"abstract":[{"type":"text","text":"The result of an insert\/update operation, achieved from "},{"type":"reference","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/run()","isActive":true},{"text":".","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"InsertionStats","kind":"identifier"}],"url":"\/documentation\/rawdawg\/insertionstats","kind":"symbol","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/InsertionStats","title":"InsertionStats","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"InsertionStats","kind":"identifier"}]},"doc://RawDawg/documentation/RawDawg/PreparedStatement":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PreparedStatement","kind":"identifier"}],"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement","type":"topic","url":"\/documentation\/rawdawg\/preparedstatement","abstract":[{"type":"text","text":"Prepared statement returned from the "},{"type":"reference","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/Database\/prepare(_:)","isActive":true},{"text":" function.","type":"text"}],"title":"PreparedStatement","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PreparedStatement"}],"kind":"symbol"},"doc://RawDawg/documentation/RawDawg/BoundQuery":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"BoundQuery"}],"type":"topic","url":"\/documentation\/rawdawg\/boundquery","abstract":[{"type":"text","text":"The means by which RawDawg safely escapes and binds interpolated values to a query."}],"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/BoundQuery","title":"BoundQuery","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BoundQuery"}],"role":"symbol"},"doc://RawDawg/documentation/RawDawg/SQLPrimitiveDecodable":{"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/SQLPrimitiveDecodable","kind":"symbol","type":"topic","abstract":[{"text":"A way of decoding dynamic ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/SQLiteValue"},{"text":" into more specific type.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLPrimitiveDecodable"}],"title":"SQLPrimitiveDecodable","url":"\/documentation\/rawdawg\/sqlprimitivedecodable","role":"symbol","navigatorTitle":[{"text":"SQLPrimitiveDecodable","kind":"identifier"}]},"doc://RawDawg/documentation/RawDawg/PreparedStatement/fetchOptional()-1sp53":{"role":"symbol","title":"fetchOptional()","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"fetchOptional","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">() "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"url":"\/documentation\/rawdawg\/preparedstatement\/fetchoptional()-1sp53","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchOptional()-1sp53","abstract":[{"text":"Return the first row decoded using a ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" protocol or ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the statement yields 0 rows"}],"kind":"symbol"},"doc://RawDawg/documentation/RawDawg/Row":{"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/Row","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Decoded, owned row, with column values"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Row"}],"title":"Row","url":"\/documentation\/rawdawg\/row","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Row"}]},"doc://RawDawg/documentation/RawDawg":{"kind":"symbol","abstract":[{"text":"Yet another SQLite3 Swift driver","type":"text"}],"type":"topic","title":"RawDawg","role":"collection","url":"\/documentation\/rawdawg","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg"},"doc://RawDawg/documentation/RawDawg/SQLiteBlob":{"abstract":[{"type":"text","text":"A Swift representation of SQLite’s "},{"code":"BLOB","type":"codeVoice"},{"text":" storage type","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"SQLiteBlob"}],"url":"\/documentation\/rawdawg\/sqliteblob","type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SQLiteBlob"}],"title":"SQLiteBlob","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/SQLiteBlob","kind":"symbol"},"doc://RawDawg/documentation/RawDawg/SQLNull":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SQLNull"}],"abstract":[{"text":"An empty struct representing a ","type":"text"},{"type":"codeVoice","code":"NULL"},{"text":" SQL value. Limited usefulness.","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SQLNull","kind":"identifier"}],"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/SQLNull","title":"SQLNull","url":"\/documentation\/rawdawg\/sqlnull"},"doc://RawDawg/documentation/RawDawg/PreparedStatement/run()":{"abstract":[{"text":"Run the statement, for when the query result doesn’t matter.","type":"text"}],"title":"run()","role":"symbol","url":"\/documentation\/rawdawg\/preparedstatement\/run()","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/run()","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:7RawDawg14InsertionStatsV","text":"InsertionStats","kind":"typeIdentifier"}],"kind":"symbol","type":"topic"},"doc://RawDawg/documentation/RawDawg/SQLiteValue":{"title":"SQLiteValue","kind":"symbol","abstract":[{"text":"Owned SQLite value of all possible storage types","type":"text"}],"url":"\/documentation\/rawdawg\/sqlitevalue","role":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"SQLiteValue","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SQLiteValue"}],"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/SQLiteValue"},"doc://RawDawg/documentation/RawDawg/PreparedStatement/fetchOne()-4grfr":{"kind":"symbol","type":"topic","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchOne()-4grfr","url":"\/documentation\/rawdawg\/preparedstatement\/fetchone()-4grfr","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"fetchOne"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">() ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"title":"fetchOne()","abstract":[{"type":"text","text":"Return the first row decoded using "},{"type":"codeVoice","code":"Decodable"},{"text":" protocol. Error out if the statement yields 0 rows","type":"text"}]},"doc://RawDawg/documentation/RawDawg/Database/prepare(_:)":{"kind":"symbol","abstract":[{"type":"text","text":"Prepares a SQL query for execution."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"prepare"},{"text":"(","kind":"text"},{"text":"BoundQuery","preciseIdentifier":"s:7RawDawg10BoundQueryV","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"PreparedStatement","preciseIdentifier":"s:7RawDawg17PreparedStatementV","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/rawdawg\/database\/prepare(_:)","title":"prepare(_:)","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/Database\/prepare(_:)"},"doc://RawDawg/documentation/RawDawg/PreparedStatement/fetchAll()-3h0eg":{"kind":"symbol","abstract":[{"text":"Collect all of the rows, statment yields, into an array of ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" values.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"fetchAll","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">() "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"]"}],"type":"topic","url":"\/documentation\/rawdawg\/preparedstatement\/fetchall()-3h0eg","title":"fetchAll()","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/fetchAll()-3h0eg"},"doc://RawDawg/documentation/RawDawg/SQLPrimitiveEncodable":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SQLPrimitiveEncodable"}],"navigatorTitle":[{"kind":"identifier","text":"SQLPrimitiveEncodable"}],"abstract":[{"text":"A way of encoding a swift value into ","type":"text"},{"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/SQLiteValue","isActive":true,"type":"reference"}],"role":"symbol","title":"SQLPrimitiveEncodable","url":"\/documentation\/rawdawg\/sqlprimitiveencodable","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/SQLPrimitiveEncodable","type":"topic","kind":"symbol"},"doc://RawDawg/documentation/RawDawg/Foundation":{"abstract":[],"url":"\/documentation\/rawdawg\/foundation","type":"topic","role":"collection","title":"Foundation","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/Foundation","kind":"symbol"},"doc://RawDawg/documentation/RawDawg/Swift":{"identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/Swift","role":"collection","title":"Swift","kind":"symbol","url":"\/documentation\/rawdawg\/swift","abstract":[],"type":"topic"},"doc://RawDawg/documentation/RawDawg/SQLiteError":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SQLiteError"}],"url":"\/documentation\/rawdawg\/sqliteerror","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/SQLiteError","type":"topic","title":"SQLiteError","abstract":[{"text":"Unified error interface, to all the things wrong that could arise when using ","type":"text"},{"type":"reference","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg","isActive":true}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"SQLiteError","kind":"identifier"}],"role":"symbol"},"doc://RawDawg/documentation/RawDawg/PreparedStatement/step()-3wy2j":{"abstract":[{"type":"text","text":"Poll-style of fetching results, that yields a single "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" value (row) at a time."}],"title":"step()","role":"symbol","url":"\/documentation\/rawdawg\/preparedstatement\/step()-3wy2j","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/PreparedStatement\/step()-3wy2j","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"step","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">() "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"?","kind":"text"}],"kind":"symbol","type":"topic"},"doc://RawDawg/documentation/RawDawg/Database":{"navigatorTitle":[{"text":"Database","kind":"identifier"}],"title":"Database","role":"symbol","identifier":"doc:\/\/RawDawg\/documentation\/RawDawg\/Database","url":"\/documentation\/rawdawg\/database","kind":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Database","kind":"identifier"}],"abstract":[{"type":"text","text":"An asyncronous sqlite3 database connection."}]}}}